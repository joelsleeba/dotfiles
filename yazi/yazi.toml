# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio          = [ 1, 4, 3 ]
sort_by        = "modified"
sort_sensitive = false
sort_reverse   = true
sort_dir_first = true
linemode       = "none"
show_hidden    = false
show_symlink   = false
scrolloff      = 5

[preview]
tab_size        = 2
max_width       = 600
max_height      = 900
cache_dir       = "~/.cache/yazi"
image_filter    = "lanczos3"
image_quality   = 75
sixel_fraction  = 15
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
folder = [
	{ run = 'nvim "$@"', block = true, desc = "nvim" },
	{ run = 'open -R "$@"', desc = "Reveal in Finder" },
]
archive = [
	{ run = 'unar "$1"', desc = "Extract here" },
]
text = [
	{ run = 'nvim "$@"', block = true },
]
image = [
	{ run = 'imv "$@"', desc = "Open" },
	{ run = '''exiftool "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show EXIF" },
]
raw-image = [
	{ run = 'imv "$@"', desc = "Open" },
	{ run = '''exiftool "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show EXIF" },
]
video = [
	{ run = 'mpv "$@"' },
	{ run = '''mediainfo "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show media info" },
]
audio = [
	{ run = 'mpv "$@"' },
  { run = 'mpc status | grep -E "playing|paused" ||  mpc clear ; mpc add "$(echo "$@" | sed "s/.*Music\///")" && mpc play', desc = "Play in MPD" },
	{ run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]
document = [
  { run = 'zathura "$@"', desc = "Zathura", orphan=true },
  { run = 'sioyek "$@"', desc = "Sioyek", orphan=true },
]
font = [
  { run = 'cp "$@" ~/.local/share/fonts/ && fc-cache -vf', desc = "install font" },
]
fallback = [
	{ run = 'open "$@"', desc = "Open" },
	{ run = 'open -R "$@"', desc = "Reveal in Finder" },
]

[open]
rules = [
	{ name = "*/", use = "folder" },
	{ name = "*.dng", use = "raw-image" },

	{ name = "*.epub", use = "document" },
	{ name = "*.djvu", use = "document" },
	{ name = "*.ps", use = "document" },
	{ mime = "application/pdf", use = "document" },

	{ mime = "application/zip", use = "archive" },
	{ mime = "application/gzip", use = "archive" },
	{ mime = "application/x-tar", use = "archive" },
	{ mime = "application/x-bzip", use = "archive" },
	{ mime = "application/x-bzip2", use = "archive" },
	{ mime = "application/x-7z-compressed", use = "archive" },
	{ mime = "application/x-rar", use = "archive" },

	{ mime = "application/json", use = "text" },

	{ mime = "*/javascript", use = "text" },
	{ mime = "text/*", use = "text" },
	{ mime = "image/*", use = "image" },
	{ mime = "video/*", use = "video" },
	{ mime = "audio/*", use = "audio" },
	{ mime = "*font*", use = "font" },
	{ mime = "inode/x-empty", use = "text" },

	{ mime = "*", use = "fallback" },
]

[tasks]
micro_workers    = 10
macro_workers    = 25
bizarre_retry    = 5
image_alloc      = 536870912  # 512MB
image_bound      = [ 0, 0 ]
suppress_preload = false

[plugin]

preloaders = [
	{ name = "*", cond = "!mime", run = "mime", multi = true, prio = "high" },
	# Image
	{ mime = "image/vnd.djvu", run = "noop" },
	{ mime = "image/*",        run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
]
previewers = [
	{ name = "*/", run = "folder", sync = true },
	# Code
	{ mime = "text/*",                 run = "code" },
	{ mime = "*/xml",                  run = "code" },
	{ mime = "*/javascript",           run = "code" },
	{ mime = "*/x-wine-extension-ini", run = "code" },
	# JSON
	{ mime = "application/json", run = "json" },
	# Image
	{ mime = "image/vnd.djvu", run = "djvu" },
	{ mime = "image/*",        run = "image" },
	# Media
	{ mime = "video/*", run = "video" },
  { mime = "audio/*", run = "album_art" },
	# Document
	{ mime = "application/pdf", run = "pdf" },
  { name = "*.djvu", run = "djvu" },
  { name = "*.epub", run = "epub" },
  # Font
  { mime = "font/*", run = "font" },
  { mime = "application/*opentype", run = "font" },
	# Archive
	{ mime = "application/zip",             run = "archive" },
	{ mime = "application/gzip",            run = "archive" },
	{ mime = "application/x-tar",           run = "archive" },
	{ mime = "application/x-bzip",          run = "archive" },
	{ mime = "application/x-bzip2",         run = "archive" },
	{ mime = "application/x-7z-compressed", run = "archive" },
	{ mime = "application/x-rar",           run = "archive" },
	{ mime = "application/xz",              run = "archive" },
	# Fallback
	{ name = "*", run = "file" },
]

[input]
# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 3 ]

# create
create_title  = "Create:"
create_origin = "top-center"
create_offset = [ 0, 2, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# trash
trash_title 	= "Move {n} selected file{s} to trash? (y/N)"
trash_origin	= "top-center"
trash_offset	= [ 0, 2, 50, 3 ]

# delete
delete_title 	= "Delete {n} selected file{s} permanently? (y/N)"
delete_origin	= "top-center"
delete_offset	= [ 0, 2, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ]
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]

# overwrite
overwrite_title  = "Overwrite an existing file? (y/N)"
overwrite_origin = "top-center"
overwrite_offset = [ 0, 2, 50, 3 ]

# quit
quit_title  = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "top-center"
quit_offset = [ 0, 2, 50, 3 ]

[select]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]

[which]
sort_by        = "none"
sort_sensitive = false
sort_reverse   = false

[log]
enabled = false

[headsup]
